{"version":3,"sources":["src/colorcube.js"],"names":[],"mappings":"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","file":"src/colorcube.js","sourcesContent":["/*\nCopyright (c) 2015, Ole Krause-Sparmann,\n                    Andrew Monks <a@monks.co>\nPermission to use, copy, modify, and/or distribute this software for\nany purpose with or without fee is hereby granted, provided that the\nabove copyright notice and this permission notice appear in all\ncopies.\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL\nWARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE\nAUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL\nDAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR\nPROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER\nTORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n*/\n\n/* jshint esnext: true */\n\n/*\nColorCube Class\n\n  Uses a 3d RGB histogram to find local maximas in the density distribution\n  in order to retrieve dominant colors of pixel images\n*/\nfunction ColorCube( resolution = 20,\n                    bright_threshold = 0.2,\n                    distinct_threshold = 0.4 ) {\n  \"use strict\";\n\n\n\n  // subclasses   // // // // // // // // // // // // // // // // // // // //\n  // // // // // // // // // // // // // // // // // // // // // // // // //\n\n\n\n  /*\n  CanvasImage Class\n\n    Class that wraps the html image element and canvas.\n    It also simplifies some of the canvas context manipulation\n    with a set of helper functions.\n\n    modified from Color Thief v2.0\n    by Lokesh Dhakar - http://www.lokeshdhakar.com\n  */\n  let CanvasImage = function (image) {\n\n    if (! image instanceof HTMLElement) {\n      throw \"You've gotta use an html image element as ur input!!\";\n    }\n\n    let API = {};\n\n    let canvas  = document.createElement('canvas');\n    let context = canvas.getContext('2d');\n\n    // document.body.appendChild(canvas);\n\n    canvas.width  = image.width;\n    canvas.height = image.height;\n\n    context.drawImage(image, 0, 0, image.width, image.height);\n\n    API.getImageData = () => {\n      return context.getImageData(0, 0, image.width, image.height);\n    };\n\n    return API;\n  };\n\n\n\n\n  /*\n  CubeCell Class\n\n    class that represents one voxel within rgb colorspace\n  */\n  function CubeCell() {\n    let API = {};\n\n    // Count of hits\n    // (dividing the accumulators by this value gives the average color)\n    API.hit_count = 0;\n\n    // accumulators for color components\n    API.r_acc = 0.0;\n    API.g_acc = 0.0;\n    API.b_acc = 0.0;\n\n    return API;\n  }\n\n\n\n\n  /*\n  LocalMaximum Class\n\n    Local maxima as found during the image analysis.\n    We need this class for ordering by cell hit count.\n  */\n  function LocalMaximum(hit_count, cell_index, r, g, b) {\n    let API = {};\n\n    // hit count of the cell\n    API.hit_count = hit_count;\n\n    // linear index of the cell\n    API.cell_index = cell_index;\n\n    // average color of the cell\n    API.r = r;\n    API.g = g;\n    API.b = b;\n\n    return API;\n  }\n\n\n\n\n\n  // ColorCube    // // // // // // // // // // // // // // // // // // // //\n  // // // // // // // // // // // // // // // // // // // // // // // // //\n\n\n\n\n  let API = {};\n\n  // helper variable to have cell count handy\n  let cell_count = resolution * resolution * resolution;\n\n  // create cells\n  let cells = [];\n  for (let i = 0; i <=  cell_count; i++) {\n    cells.push( new CubeCell() );\n  }\n\n  // indices for neighbor cells in three dimensional grid\n  let neighbour_indices = [\n    [ 0, 0, 0],\n    [ 0, 0, 1],\n    [ 0, 0,-1],\n\n    [ 0, 1, 0],\n    [ 0, 1, 1],\n    [ 0, 1,-1],\n\n    [ 0,-1, 0],\n    [ 0,-1, 1],\n    [ 0,-1,-1],\n\n    [ 1, 0, 0],\n    [ 1, 0, 1],\n    [ 1, 0,-1],\n\n    [ 1, 1, 0],\n    [ 1, 1, 1],\n    [ 1, 1,-1],\n\n    [ 1,-1, 0],\n    [ 1,-1, 1],\n    [ 1,-1,-1],\n\n    [-1, 0, 0],\n    [-1, 0, 1],\n    [-1, 0,-1],\n\n    [-1, 1, 0],\n    [-1, 1, 1],\n    [-1, 1,-1],\n\n    [-1,-1, 0],\n    [-1,-1, 1],\n    [-1,-1,-1]\n  ];\n\n  // returns linear index for cell with given 3d index\n  let cell_index = (r, g, b) => {\n    return (r + g * resolution + b * resolution * resolution);\n  };\n\n  let clear_cells = () => {\n    for (let cell of cells) {\n      cell.hit_count = 0;\n      cell.r_acc = 0;\n      cell.g_acc = 0;\n      cell.b_acc = 0;\n    }\n  };\n\n  API.get_colors = (image) => {\n    let canvasimage = new CanvasImage(image);\n\n    let m = find_local_maxima(canvasimage);\n\n    m = filter_distinct_maxima(m);\n\n    let colors = [];\n    for (let n of m) {\n      let r = Math.round(n.r * 255.0);\n      let g = Math.round(n.g * 255.0);\n      let b = Math.round(n.b * 255.0);\n      let color = rgbToHex(r, g, b);\n      if (color === \"#NaNNaNNaN\") {continue;}\n      colors.push(color);\n    }\n\n    return colors;\n  };\n\n  let componentToHex = (c) => {\n    let hex = c.toString(16);\n    return hex.length == 1 ? \"0\" + hex : hex;\n  };\n\n  let rgbToHex = (r, g, b) => {\n    return \"#\" + componentToHex(r) + componentToHex(g) + componentToHex(b);\n  };\n\n  // finds and returns local maxima in 3d histogram, sorted by hit count\n  let find_local_maxima = (image) => {\n    // reset all cells\n    clear_cells();\n\n    // get the image pixels\n    let data = image.getImageData().data;\n\n    // iterate over all pixels of the image\n    for(let i = 0; i < data.length; i += 4) {\n      // get color components\n      let red = data[i] / 255.0;\n      let green = data[i+1] / 255.0;\n      let blue = data[i+2] / 255.0;\n      let alpha = data[i+3] / 255.0;\n\n      // stop if brightnesses are all below threshold\n      if (red < bright_threshold &&\n          green < bright_threshold &&\n          blue < bright_threshold) {\n        // continue;\n      }\n\n      // weigh colors by alpha channel\n      red *= alpha;\n      green *= alpha;\n      blue *= alpha;\n\n      // map color components to cell indicies in each color dimension\n      // TODO maybe this should round down? OG colorcube uses python's int()\n      let r_index = Math.round( red * ( resolution - 1.0 ) );\n      let g_index = Math.round( green * ( resolution - 1.0 ) );\n      let b_index = Math.round( blue * ( resolution - 1.0 ) );\n\n      // compute linear cell index\n      let index = cell_index(r_index, g_index, b_index);\n\n      // increase hit count of cell\n      cells[index].hit_count += 1;\n\n      // add pixel colors to cell color accumulators\n      cells[index].r_acc += red;\n      cells[index].g_acc += green;\n      cells[index].b_acc += blue;\n    }\n\n    // we collect local maxima in here\n    let local_maxima = [];\n\n    // find local maxima in the grid\n    for (let r = 0; r < resolution; r++) {\n      for (let g = 0; g < resolution; g++) {\n        for (let b = 0; b < resolution; b++) {\n\n          let local_index = cell_index(r, g, b);\n\n          // get hit count of this cell\n          let local_hit_count = cells[local_index].hit_count;\n\n          // if this cell has no hits, ignore it\n          if (local_hit_count === 0) {\n            continue;\n          }\n\n          // it's a local maxima until we find a neighbor with a higher hit count\n          let is_local_maximum = true;\n\n          // check if any neighbor has a higher hit count, if so, no local maxima\n          for (let n in new Array(27)) {\n            r_index = r + this.neighbor_indices[n][0];\n            g_index = g + this.neighbor_indices[n][1];\n            b_index = b + this.neighbor_indices[n][2];\n\n            // only check valid cell indices\n            if (r_index >= 0 && g_index >= 0 && b_index >= 0) {\n              if (r_index < this.resolution && g_index < this.resolution && b_index < this.resolution) {\n                if (this.cells[this.cell_index(r_index, g_index, b_index)].hit_count > local_hit_count) {\n                  // this is not a local maximum\n                  is_local_maximum = false;\n                  break;\n                }\n              }\n            }\n          }\n\n          // if this is not a local maximum, continue with loop\n          if (is_local_maximum === false) {\n            continue;\n          }\n\n          // otherwise add this cell as a local maximum\n          let avg_r = cells[local_index].r_acc / cells[local_index].hit_count;\n          let avg_g = cells[local_index].g_acc / cells[local_index].hit_count;\n          let avg_b = cells[local_index].b_acc / cells[local_index].hit_count;\n          let localmaximum = new LocalMaximum(local_hit_count, local_index, avg_r, avg_g, avg_b);\n\n          local_maxima.push( localmaximum );\n        }\n      }\n    }\n\n    // return local maxima sorted with respect to hit count\n    local_maxima = local_maxima.sort(function(a, b) { return b.hit_count - a.hit_count; });\n\n    return local_maxima;\n  };\n\n  // Returns a filtered version of the specified array of maxima,\n  // in which all entries have a minimum distance of distinct_threshold\n  let filter_distinct_maxima = (maxima) => {\n\n    let result = [];\n\n    // check for each maximum\n    for (let m of maxima) {\n      // this color is distinct until an earlier color is too close\n      let is_distinct = true;\n\n      for (let n of result) {\n        // compute delta components\n        let r_delta = m.r - n.r;\n        let g_delta = m.g - n.g;\n        let b_delta = m.b - n.b;\n\n        // compute delta in color space distance\n        let delta = Math.sqrt(r_delta * r_delta + g_delta * g_delta + b_delta * b_delta);\n\n        // if too close, mark as non distinct and break inner loop\n        if (delta < distinct_threshold) {\n          is_distinct = false;\n          break;\n        }\n      }\n\n      // add to filtered array if is distinct\n      if (is_distinct === true) {\n        result.push(m);\n      }\n    }\n\n\n    return result;\n  };\n\n  return API;\n}\n"]}